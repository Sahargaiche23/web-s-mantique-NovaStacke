#!/usr/bin/env python3
"""
Test des recommandations avec diff√©rents param√®tres
"""
import requests
import json

API_BASE = "http://localhost:5000/api"

def test_recommendations(params, name):
    try:
        r = requests.post(f"{API_BASE}/recommendations/travel-plan", json=params)
        if r.status_code == 200:
            data = r.json()
            score = data.get('total_eco_score', 0)
            carbon = data.get('estimated_carbon_footprint', 0)
            print(f"‚úÖ {name}: Score={score}, CO2={carbon}kg")
            return True
        else:
            print(f"‚ùå {name}: Status {r.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå {name}: {str(e)}")
        return False

print("="*60)
print("üß™ TEST DES RECOMMANDATIONS PERSONNALIS√âES")
print("="*60)

# Test 1: Profil √âco-responsable, budget √©lev√©, pr√©f√©rences nature
test_recommendations({
    "max_budget": 3000,
    "eco_profile": "√âco-responsable",
    "preferences": "nature"
}, "√âco-responsable + Nature + Budget √©lev√©")

# Test 2: Profil Mod√©r√©, budget faible, pr√©f√©rences culture
test_recommendations({
    "max_budget": 1000,
    "eco_profile": "Mod√©r√©",
    "preferences": "culture"
}, "Mod√©r√© + Culture + Budget faible")

# Test 3: Profil Flexible, budget moyen, pr√©f√©rences plage
test_recommendations({
    "max_budget": 2000,
    "eco_profile": "Flexible",
    "preferences": "plage"
}, "Flexible + Plage + Budget moyen")

# Test 4: Sans pr√©f√©rences
test_recommendations({
    "max_budget": 2500,
    "eco_profile": "√âco-responsable",
    "preferences": ""
}, "√âco-responsable + Sans pr√©f√©rences")

print("\n" + "="*60)
print("‚úÖ TESTS TERMIN√âS")
print("="*60)
